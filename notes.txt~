BEAN DEFINITION
<bean id="..." />
<bean name="..." />
What is the difference between id and name?
*id is a formal XML attribute and is allowed to contain only valid xml symbols(until Spring 3).
*name is allowed to contain any symbols including whitespaces. It is used to point several names for one bean. It can be used when your bean implements several interfaces: ClientService and LogonService. In different places you can refer to that bean by different names. Doing this way you create aliases for bean. In addition to attribute name you can create aliases by using xml tag alias:
<bean id="batman" />
<alias name="batman" alias="dark_knight" />
Alias can be used when you add some context and you can't change it, but you want to define another name for some bean from that context.

SPRING CONTAINERS
There are 2 types if containers in Spring:
1) BeanFactory - it is the simplest container and can do only DI.
BeanFactory
This interface is implemented by objects that hold a number of bean definitions, each uniquely identified by a String name. The BeanFactory is a central registry of application components, and centralizes configuration of application components (no more do individual objects need to read properties files, for example). It is generally better to rely on Dependency Injection ("push" configuration) to configure application objects through setters or constructors, rather than use any form of "pull" configuration like a BeanFactory lookup.
Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is:
1. BeanNameAware's setBeanName
2. BeanClassLoaderAware's setBeanClassLoader
3. BeanFactoryAware's setBeanFactory
4. ResourceLoaderAware's setResourceLoader (only applicable when running in an application context)
5. ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context)
6. MessageSourceAware's setMessageSource (only applicable when running in an application context)
7. ApplicationContextAware's setApplicationContext (only applicable when running in an application context)
8. ServletContextAware's setServletContext (only applicable when running in a web application context)
9. postProcessBeforeInitialization methods of BeanPostProcessors
10. InitializingBean's afterPropertiesSet
11. a custom init-method definition
12. postProcessAfterInitialization methods of BeanPostProcessors
On shutdown of a bean factory, the following lifecycle methods apply:
	1. DisposableBean's destroy
	2. a custom destroy-method definition
2) ApplicationContext - it has abilities of BeanFactory and adds some services for managing beans in container.

BEAN SCOPE
By default all beans created by spring are singletons, but we can configure spring so that after each call of getBean() it will create new object. To do that we need to define scope 'prototype':
<bean id=".." class=".." scope="prototype" />
To create singleton we can write:
<bean id=".." class=".." scope="singleton" />
There are also scopes for web application: request, session, global-session.

Bean scopes
To define scope you can use @Scope annotation in conjunction with @Component or @Bean annotations:
@Bean
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public Notepad notepad() { ...
In xml config we can use "scope" attribute:
<bean id=".." class=".." scope="prototype" />
In addition to scope and prototype there are also session and request scopes. They are used in web development. For example, we have singleton bean called StoreService and we want to inject session scoped ShoppingCart bean. So to make StoreService work with every ShoppingCart we define it like this:
@Component
@Scope(
value=WebApplicationContext.SCOPE_SESSION,
proxyMode=ScopedProxyMode.INTERFACES)
public class ShoppingCart { ... }
...
@Component
public class StoreService {
	@Autowired
	public void setShoppingCart(ShoppingCart shoppingCart) {
		this.shoppingCart = shoppingCart;
	}
}	
By doing this we inject proxy into StoreService and when it will do smth with shoppingCart field proxy will delegate calls to every session bean of type ShoppingCart. We use ScopedProxyMode.INTERFACES when ShoppingCart is interface and ScopedProxyMode.TARGET_CLASS when it is a class.
In case of xml config we do the following:
<bean id="cart" class="com.myapp.ShoppingCart" scope="session">
	<aop:scoped-proxy />
</bean>
Here <aop:scoped-proxy/> creates target class proxy. If we need interface-based proxy specify 'proxy-target-class' attribute:
<aop:scoped-proxy proxy-target-class="false" />

INNER BEANS
Inner beans are beans which you define inside other bean definition. By doing it you hide that bean from other beans. You can define id or name for inner bean but they will be invisible for other outer beans anyway. Example:
<bean id="event" scope="prototype" class="Event">
	<constructor-arg>
		<bean class="java.util.Date" />
	<constructor-arg/>
</bean>

INITIALIZE AND DESTROY
For initialization purposes we can define init method for a bean:
<bean id="batman" class="com.yra.Batman" init-method="init" />
Init method can't has arguments, can has any access modifier and can return value.
For cleaning resources we can define destroy method for a bean:
<bean id="batman" class="com.yra.Batman" destroy-method="destroy" />
It is called when spring closes application context.

BEAN DEFINITION INHERITANCE
<bean id="batman" ... />
<bean id="dark_knight" parent="batman" />
A bean definition potentially contains a large amount of configuration information, including container specific information (for example initialization method, static factory method name, and so forth) and constructor arguments and property values. A child bean definition is a bean definition that inherits configuration data from a parent definition.

DEPENDS-ON
Sometimes creation of one bean depends on initialization side effects of another bean. In such cases we can write like this:
<bean id="a" class="..." />
<bean id="b" class="..." depends-on="a" />
Here bean "b" will be created after bean "a".

LAZY-INIT
Sometimes we want to create bean only when getBean() is called. For example, if bean initialization is heavy process we want it to happen only when that bean is requested. In such cases we write:
<bean id=".." class=".." lazy-init="true" />
If we want spring to make all bean definitions located in a concrete file are lazy we do this:
<beans default-lazy-init="true">
	...
</beans>

IMPORTING SPRING CONFIGURATION
Sometimes we want to specify configuration of beans responsible for security in one file and for db connection in another file. To do that we create 2 files: security-spring.xml, db-spring.xml. After that in main spring.xml file we import those resources:
<beans>
	<import resource="security-spring.xml" />
	<import resource="db-spring.xml" />
</beans>

MULTIPLE CONTEXTS
We can define parent context and child context. Example:
ApplicationContext parent = new ClassPathXmlApplicationContext("spr1.xml");
ApplicationContext child = new ClassPathXmlApplicationContext("spr2.xml", parent);
In this case beans from child context can refer to bean from parent context but not vise versa.

SETTING PROPERTIES
<bean id="..">
	<property name="type" value="integer" />
</bean>
For setting list we use:
<list>
	<value>..</value>
	<ref bean=".." />
	<bean class="java.util.Date" />
</list>
map:
<map>
    <entry key="INFO" value-ref="consoleEventLogger" />
    <entry key="ERROR" value-ref="combinedEventLogger" />
</map>

PROPERTIES FILE LOADING
To load properties file in spring context we can define PropertyPlaceholderConfigurer:
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
		<list>
			<value>classpath:client.properties</value>
		</list>
	</propery>
</bean>
To use values from properties file we do the following:
<bean id="..">
	<constructor-arg value="${id}"/>
	<property name="fullName" value="${name}" />
</bean>

UTIL NAMESPACE
We can add namespaces to our spring xml and use additional facilities. For example we can include util namespace - http://www.springframework.org/schema/util. It gives us opportunity to create maps, lists, properties and save them as beans:
<util:map id="loggerMap">
	<entry key="INFO" value-ref="consoleLogger" />
	<entry key="ERROR" value-ref="fileLogger" />
</util:map>

P AND C NAMESPACES
We can use these namespaces to shorten spring xml configuration. C namespace is target to eliminate using of constructor-arg tag. Instead of it we can write:
<bean id="bat" class=".." c:id="${id}" c:fullName="${name}" c:logger-ref="someLogger" />
where id, fullName, logger are names of constructor arguments.
P namespace eliminate using of property tag in the same way.

BEAN AUTOWIRING
Spring can inject bean's properties without property and constructor-arg things. It do this with help of autowiring. Example:
<bean id="bat" class="" autowire="byName" />
Here we inject all bat's properties by finding beans with names which equal to names of bean's properties. We can also use byType or constructor(when spring looks for beans with type which specified in bean's constructor).

ANNOTATION CONFIG
To add opportunity of configuring beans with annotations we need to write in spring xml:
<context:annotation-config />
and specifying context namespace.
One of the most important annotations is @Autowired. It injects bean properties. It can be specified like this: @Autowired(required=false) and spring won't throw an exception because of bean absence. @Autowired search bean by type but there are case when we have several bean implementing one interface. In such situation we can specify the name of bean that we want to inject as property:
@Autowired
@Qualifier("Nolan's version")
private Batman batman; 
@PostConstruct and @PreDestroy are analogues of init-mehtod and destroy-method xml attributes.
To define beans we can one of the following annotations: @Component, @Controller, @Repository, @Service. There is no difference between them. To make spring aware of beans declared by these annotations we need to write in xml:
<context:component-scan base-package="..." />

JAVA BASED CONFIGURATION
We also can configure and create beans in java code. To do that we need to write:
@Configuration
class BatmanConfig {
	@Bean
	public Batman createBatman() {
		return new Batman();
	}
}
In such approach properties can be set by @Autowired. To use such configuration class we need use specific ApplicationContext implementation:
ApplicationContext ctx = new AnnotationConfigApplicationContext(BatmanConfig.class);
We can pass there several configuration classes. One more way:
AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
ctx.register(BatmanConfig.class);
ctx.refresh();// update context
If you specified your beans with @Component annotation than you can scan package:
ctx.scan("come.epam.spring.core");
ctx.refresh();


Profile beans
There could be situations when we need to create specific beans for specific environments. For such cases we can use spring Profile feature. We can use it as class-level annotation:
@Configuration
@Profile("dev")
public class DevelopmentProfileConfig {
	@Bean(destroyMethod="shutdown")
	public DataSource dataSource() {
		return new EmbeddedDatabaseBuilder()
			.setType(EmbeddedDatabaseType.H2)
			.addScript("classpath:schema.sql")
			.addScript("classpath:test-data.sql")
			.build();
	}
}
Then we will create beans under this config class only when profile 'dev' is active. We also can use it at method level:
@Bean
@Profile("prod")
public DataSource jndiDataSource() {
	JndiObjectFactoryBean jndiObjectFactoryBean =
	new JndiObjectFactoryBean();
	jndiObjectFactoryBean.setJndiName("jdbc/myDS");
	jndiObjectFactoryBean.setResourceRef(true);
	jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);
	return (DataSource) jndiObjectFactoryBean.getObject();
}
Profiles can be activated by setting properties: spring
.profiles.active, spring.profiles.default. These properties can be set:
*As initialization parameters on DispatcherServlet
*As context parameters of a web application
*As JNDI entries
*As environment variables
*As JVM system properties
*Using the @ActiveProfiles annotation on an integration test class

Conditional beans
Sometimes we want create spring beans under certain conditions. For such cases we can use @Conditional annotation:
@Bean
@Conditional(MagicExistsCondition.class)
public MagicBean magicBean() {
	return new MagicBean();
}
Here MagicExistsCondition implements Condition interface:
public interface Condition {
	boolean matches(ConditionContext ctxt,
		AnnotatedTypeMetadata metadata);
}

Addressing ambiguity in autowiring
If we define several beans implementing one interface and then inject instance of this interface into somewhere it will cause exception because spring doesn't know what implementation to choose. For such cases we can one of 2 things.
1) Designate one of beans as primary: by annotation @Primary or by primary="true" in xml.
2) Use @Qualifier.
3) Create custom annotation based on @Qualifier. This approach can fit your need when you want specify several @Qualifier annotations on one field but Java doesn't allow that.
@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,
ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Qualifier
public @interface Creamy { }
...
public @interface Fruity { }
..
@Autowired
@Creamy
@Fruity
private Dessert dessert;

EXPRESSION LANGUAGE
We can use expr language for configuring spring beans. For example, previously we bean property doing the following:
<property name="weapon" ref="shotgun" />
We also can do that with expr language:
<property name="weapon" value="#{shotgun}" />
Why we need that? We actualy can call methods of beans inside the expr language block. For example:
<property name="weapon" value="#{jamesBond.walterP99} />"
We also can pass arguments in these methods: value="#{jamesBond.car('Casino-Royal')}"
or continue calling sequence: value="#{jameBond.car('Casino-Royal').petrolAmount}"
in case of car() return null exveption will be thrown. But we can avoid that: "#{jamesBond.car('Casino-Royal')?.petrolAmount}" - now if car() return null the result of expression will null.
If we want to call some static variable or method we do this:
<property name="weapon" value="#{T(com.bondiana.Arsenal).GRENADE}" />
<... value="#{T(com.bond.Bond).idGenerator}" />
Expression language has support for logical, mathematical operations and also instanceof and regular expression matching. Ternary operator is also allowable.

AOP IN SPRING
* Aspect is modularized cross-cutting concern.
* Advice is what aspect should do. It is job of aspect. Advice also contain data about when to do the job: before method invocation or after or ... So there are several types of advices in Spring:
	Before - before the method invocation.
	After - after method completes regardless method outcomes.
	After-returning - after successful completion.
	After-throwing - after adviced method throws an exception.
	Around - provides functionality that is invoked before and after method invocation.
* Join Point is reponsible for where advice should be called. These points can be method being called, exception being throwed, field being modified.
* Pointcut definition matches one or more join points where advice should be called.
Now we can say that Aspect is the merger of advice and pointcuts. It contains data about what should be done and where.
* Introduction is an ability to add new fields/methods to existing classes.
* Weaving is the process of applying aspects to a target object. There are several ways to do that:
	Compile time
	Class loading
	Runtime
* Spring AOP do this at runtime by wrapping managed beans into proxies. These proxies do advice logic when need and than delegate work to bean.
* Spring AOP supports only method join points.
To tell spring that we gonna use aspects we need to specify in our xml config:
<aop:aspectj-autoproxy />
or if we use annotations:
@Configuration
@EnableAspectJAutoProxy
To define aspect we need to write class and annotate it with @Aspect:
@Aspect
public class LoggingAspect {}
and add bean definition in xml:
<bean id="loggingasp" class=".." />
In case of annotation config we just need to specify @Component above class definition.

AOP IN COMMON
So the aop programming includes such steps as defining aspect class by annotating it with @Aspect. In this class we specify poincuts which are describing points in program workflow where advices code will be inserted. We also define there advices methods. These are methods with annotations @After, @Before, @AfterReturning, @AfterThrowing, @Around with pointcuts specified as annotation value. We can pass JoinPoint object to such methods which are playing role of reference to adviced method.

AOP HANDLING METHOD ARGUMENTS
To pass some of the method argument to advice method we need to args() in the pointcut description:
@Pointcut("execution(** com.bat.Batman.fightWith(String)) && args(name)")
public void fightWith(String name) {}
@Before("fightWith(name)")
public void fightAdvice(String name) {...} // here advice can read name value

AOP INTRODUCING NEW METHODS
Sometimes there is a need to make some class to implement some interface. Bu we don't want to declare one more interface because we will have to introduce this method in all implementations. For such case we can use aop proxy that wrap our bean to delegate new method call to object which implements new interface:
interface Encore {
	performEncore();
}...
@Aspect
class EncoreIntroducer {
	@DeclareParents(value="com.concert.Performane+", defaultImpl = DefaultEncoreImpl.class)
	public Encore encore;
}
Here value parameter says to add new method for all implementation of Performance interface and defaultImpl refer to bean to which we will delegate calls.

AOP XML CONFIGURATION
Configuration of aspects in spring begins with <aop:config> element and usually located within it. Definition of aspect goes into <aop:aspect> element:
<aop:aspect ref="audience">
	<aop:before pointcut="execution(** com.yra.Performance.perform(..))"
		method="takeSeats" />	
</aop:aspect>
To define pointcut in a separete element for the sake of reuse we do:
<aop:pointcut id="performance" expression="execution(** Class.method(..))" />
It can be defined inside of aspect and used only within it or it can be externalized and used by several aspects.

AOP XML INTRODUCTION
When we need to extend some bean and make it to implement additional interface without specifying it in java code we use <aop:declare-parents/>
We specify this element inside of <aop:aspect>:
<aop:aspect ref="batman">
  <aop:declare-parents
	types-matching="com.yra.Batman+"
	implement-interface="com.yra.Pilot"
	default-impl="com.pilot.DefaultPilotImpl" />
</aop:aspect>

SPRING MVC
REQUEST WORKFLOW
Request come to dispatcher servlet. DispatcherServlet consults with Handler Mapping to choose appropriate controller. After that request goes to controller and got processed by it. After processing controller returns data and view name to DispatcherServlet. DispatcherServlet goes to view resolver with view name and choose wich view will be used for showing data.

APP CONTEXT FOR DISPATCHER SERVLET
By default spring tries to load app context from file with name consisting of name of dispatcher servlet and suffix '-servlet.xml'. For example:
<servlet>
	<servlet-name>dispatcher</servlet-name>
	<servlet-class>...DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>...</servlet-mapping>
Here spring will load context from file 'dispatcher-servlet.xml'. If you want to change the name of file, you can specify it in this way:
<servlet>
	...
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/web-config.xml</param-value>
	</init-param>
</servlet>
In this way you define context for dispatcher servlet. But you can define one more app context which will be common for all dispatcher servlets. There you can store definitions of common services, data sources, etc. Do it like this:
<listener>
	<listener-class>...ContextLoaderListener</listener-class>
</listener>
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/app-context.xml</param-value>
</context-param>
ContextLoaderListener will load this context.

REQUESTS MAPPING
There are several ways to map requests to specific controller. In the root of hierarchy is HandlerMapping interface that is implemented by:
* BeanNameUrlHandlerMapping - it maps url to bean name. To use it you define bean with class BeanNameUrlHandlerMapping and then define beans with name equal to request's url. Example: <bean name="/app" class="com.epam.BatmanController" />
* ControllerClassNameHandlerMapping - it maps url to controller name by removing 'Controller' suffix, converting the remaining string to lower case and addding '/' at the beginning.
* SimpleUrlHandlerMapping - maps url to controller classes.
* DefaultAnnotationHandlerMapping - it is a default implementation and its is based on @Controller and @RequestMapping annotations.

XML CONFIG FOR CONTROLLER
<mvc:annotation-driven /> - this element turn @Controller annotated classes into actual web controllers.

HANDLER INTERCEPTORS
HandlerInterceptor is an interface that allows to intercept requests before they go to handler(controller) and responses returned by handlers. Usualy we put there fine-grained preprocessing tasks or logic common for several handlers. We can define them in <mvc:interceptor> xml element.
<mvc:annotation-driven /> - use this xml element to configure controllers with help of annotations.

CONTROLLER CONCEPT
In the most simple case controller is an implementation of Controller interface with single handleRequest method which accepts request and response as a parameters and returns ModelAndView object to dispatcher servlet. In case of annotation config use @Controller and @RequestMapping annotations.

ACCESSING VALUES OF REQUEST PARAMETERS
We can access request parameters by using request object but more convenient way is to use @RequestParam annotation and get values as controller method parameters:
@RequestMapping("/calculate")
public ModelAndView calculate(@RequestParam("first") int first, @RequestParam("second) int second) {...}
We also can access url parts as method arguments with help of @PathVariable:
@RequestMapping("/peopleNumber/{country}/{city}")
public ModelAndView getNumberOfPeople(@PathVariable("country") String country, @PathVariable("city") String city)
In both cases we can omit annotation values if values in url placeholder match the method parameters. 
We can also use such annotations as @RequestHeader, @CookieValue, @MatrixVariable to get corresponding values. Annoatation @ModelAttribute used near method parameter binds value of model to method parameter and if used at the method level then bind method return value to resulting model.

VIEW RESOLVING FLOW
In of the possible cases controller returns name of view. Dispatcher Servlet takes this name and calles every view resolver it has to find corresponding View object. Different implementations of view resolver define different ways to show data.
Here are some examples of view resolvers:
1) UrlBasedViewResolver - can be used with JSP view technology.
2) ResourceBundleViewResolver - can be used to combine different view technologies.

EXCEPTION HANDLING


